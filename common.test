#!/bin/bash

[ -f env ] && . ./env
[ -f env.build ] && . ./env.build

test_name=$(basename "$0")

CLKNETSIM_RANDOM_SEED=${CLKNETSIM_RANDOM_SEED:-1234}
INPUT_DIR=${INPUT_DIR:-input}
WORK_DIR=${WORK_DIR:-work}

export CLKNETSIM_RANDOM_SEED
export PATH=$WORK_DIR/chrony:$PATH
#export ASAN_OPTIONS=abort_on_error=1:symbolize=0:detect_leaks=0
#export UBSAN_OPTIONS=halt_on_error=1:abort_on_error=1:detect_leaks=0

[ $# -ge 1 ] && input=$1 || input="$INPUT_DIR/$test_name"
output=$WORK_DIR/output/$test_name

if [ "$output" = "$input" ]; then
	echo "Output is same as input"
	exit 1
fi

if ! [ -x "$WORK_DIR/chrony/chronyd" ] || ! [ -x "$WORK_DIR/chrony/chronyc" ]; then
	echo "Missing chrony binaries"
	exit 1
fi

seed() {
	rm -rf "$WORK_DIR/seed"
	mkdir -p "$WORK_DIR/seed" || exit 1
	rm -f "$input"/seed*
	mkdir -p "$input" || exit 1

	if [ ${#seeds[@]} -gt 0 ]; then
		i=0
		for s in "${seeds[@]}"; do
			i=$((i + 1))
			printf "%s" "$s" | wc -c
			printf "%s" "$s" > "$input"/seed.$i
		done
		return
	fi

	if [ ${#seed_command[@]} -eq 0 ]; then
		echo "no seed command"
		return
	fi

	mode=$CLKNETSIM_FUZZ_MODE
	unset CLKNETSIM_FUZZ_MODE
	port=$CLKNETSIM_FUZZ_PORT
	subnet=${CLKNETSIM_FUZZ_SUBNET:-1}
	export CLKNETSIM_UNIX_SUBNET=2
	export CLKNETSIM_SOCKET=$WORK_DIR/seed/sock
	stdin=$TEST_STDIN_FILE
	unset TEST_STDIN_FILE

	if [ ${#seed_command2[@]} -gt 0 ]; then
		rm -rf "$WORK_DIR/seed/{data,tmp}"
		ln -sf "$(pwd)/data" "$WORK_DIR/seed/data"
		ln -sf . "$WORK_DIR/seed/tmp"
		pushd "$WORK_DIR/seed" || return
		TEST_ENABLE_WRITE=1 \
		CLKNETSIM_NODE=1 CLKNETSIM_PCAP_DUMP="$WORK_DIR/seed/pcap" \
			"${seed_command2[@]}" &> "$WORK_DIR/seed/log.1" &
		popd || return
	else
		CLKNETSIM_NODE=1 CLKNETSIM_PCAP_DUMP="$WORK_DIR/seed/pcap" \
			"$@" &> "$WORK_DIR/seed/log.1" &
	fi
	CLKNETSIM_NODE=2 "${seed_command[@]}" &> "$WORK_DIR/seed/log.2" &
	../clknetsim/clknetsim -v 0 -s "$CLKNETSIM_SOCKET" -n 2 -l 100 <(cat <<-EOF
		node1_delay2 = (+ 1e-6)
		node2_delay1 = (+ 1e-6)
	EOF
		) 2 &> "$WORK_DIR/seed/log"
	wait

	if [ -n "$stdin" ]; then
		cp "$WORK_DIR/seed/$(basename "$stdin")" "$input/seed"
	else
		scripts/pcap2input -o "$input/seed" \
			-f "dst 192.168.$((122 + subnet)).1 and src port $port" \
			$([ "$mode" -eq 1 ] && echo "-p") "$WORK_DIR/seed/pcap"
	fi
}

single() {
	args=()
	for arg; do
		if [ "$arg" = "@@" ]; then
			tmpfile=$(mktemp)
			cat > "$tmpfile"
			args+=("$tmpfile")
		else
			args+=("$arg")
		fi
	done

	$TEST_WRAPPER "${args[@]}"
	r=$?

	[ -f "$tmpfile" ] && rm -f "$tmpfile"

	return $r
}

run() {
	local input=$1
	shift 1

	args=()
	for arg; do
		if [ "$arg" = "@@" ]; then
			args+=("$input")
		else
			args+=("$arg")
		fi
	done

	$TEST_WRAPPER "${args[@]}" < "$input"
}

check() {
	local verbose=0 failed=0 ok=0 jobs=0 nproc

	if [[ "$1" =~ verbose ]]; then
		verbose=1
		nproc=1
	elif [ -n "$TEST_NPROC" ]; then
		nproc=$TEST_NPROC
	else
		nproc=$(nproc)
	fi

	shift 1

	for i in "$input"/*; do
		(
			ulimit -c 0
			if [ $verbose -eq 0 ]; then
				run "$i" "$@" &> /dev/null
			else
				echo "$i"
				run "$i" "$@"
			fi
			code=$?
			[ $code -eq 0 ] && exit 0

			[[ "$1" =~ chronyc ]] && [ $code -lt 128 ] && exit 0

			echo "FAILED: $* < $i"
			exit 1
		) &

		jobs=$((jobs + 1))

		if [ $jobs -ge "$nproc" ]; then
			wait -n && ok=$((ok + 1)) || failed=$((failed + 1))
			jobs=$((jobs - 1))
		fi
	done

	while [ $jobs -gt 0 ]; do
		# Workaround for some random failures
		[ $jobs -le 1 ] && sleep 0.1
		wait -n && ok=$((ok + 1)) || failed=$((failed + 1))
		jobs=$((jobs - 1))
	done

	echo "$test_name: passed $ok failed $failed"
	return $((failed != 0))
}

minimize() {
	mkdir -p "$output"
	rm -rf "$output/minimized"
	"$AFL_PATH/afl-cmin" -i "$input" -o "$output/minimized" -- "$@"
}

showmap() {
	mkdir -p "$output"
	"$AFL_PATH/afl-showmap" -C -i "$input" -o "$output/map" -- "$@"
}

fuzz() {
	mkdir -p "$output"
	nice -20 "$AFL_PATH/afl-fuzz" \
		-T "chrony-$test_name-$CLKNETSIM_RANDOM_SEED" -m none \
		$([ -f "dicts/$test_name" ] && echo "-x dicts/$test_name") \
		-i "$input" -o "$output" -- "$@"
}

run_test() {
	case "$TEST_MODE" in
		seed)
			seed "$@";;
		single)
			single "$@";;
		check|checkverbose)
			check "$TEST_MODE" "$@";;
		minimize)
			minimize "$@";;
		showmap)
			showmap "$@";;
		fuzz|"")
			fuzz "$@";;
		*)
			echo "Unknown test mode"; exit 1;;
	esac
}
