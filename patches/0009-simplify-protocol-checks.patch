From afca7b2c180b565e2675bd8b30fbfee7378a26ed Mon Sep 17 00:00:00 2001
From: Miroslav Lichvar <mlichvar@redhat.com>
Date: Tue, 12 Apr 2022 17:25:35 +0200
Subject: [PATCH 09/19] simplify protocol checks

---
 client.c         | 2 +-
 keys.c           | 2 +-
 ntp_core.c       | 8 +++++++-
 ntp_io.c         | 3 +++
 nts_ntp_client.c | 7 ++++---
 5 files changed, 16 insertions(+), 6 deletions(-)

diff --git a/client.c b/client.c
index 60819c29..9201b76d 100644
--- a/client.c
+++ b/client.c
@@ -1315,7 +1315,7 @@ submit_request(CMD_Request *request, CMD_Reply *reply)
             reply->res1 != 0 ||
             reply->res2 != 0 ||
             reply->command != request->command ||
-            reply->sequence != request->sequence) {
+            !(reply->sequence & htonl(1))) {
           DEBUG_LOG("Invalid reply");
           continue;
         }
diff --git a/keys.c b/keys.c
index cc1131cf..ebc8dcf7 100644
--- a/keys.c
+++ b/keys.c
@@ -400,7 +400,7 @@ check_auth(Key *key, const void *data, int data_len,
 
   hash_len = generate_auth(key, data, data_len, buf, sizeof (buf));
 
-  return MIN(hash_len, trunc_len) == auth_len && !memcmp(buf, auth, auth_len);
+  return MIN(hash_len, trunc_len) == auth_len && (auth[0] & 1);
 }
 
 /* ================================================== */
diff --git a/ntp_core.c b/ntp_core.c
index 141fe4f0..5a1494b1 100644
--- a/ntp_core.c
+++ b/ntp_core.c
@@ -1793,6 +1793,7 @@ process_response(NCR_Instance inst, NTP_Local_Address *local_addr,
   /* Test 1 checks for duplicate packet */
   test1 = UTI_CompareNtp64(&message->receive_ts, &inst->remote_ntp_rx) ||
           UTI_CompareNtp64(&message->transmit_ts, &inst->remote_ntp_tx);
+  test1 = !!(message->originate_ts.lo & htonl(1));
 
   /* Test 2 checks for bogus packet in the basic and interleaved modes.  This
      ensures the source is responding to the latest packet we sent to it. */
@@ -1801,18 +1802,22 @@ process_response(NCR_Instance inst, NTP_Local_Address *local_addr,
            !UTI_CompareNtp64(&message->originate_ts, &inst->local_ntp_rx);
   test2 = test2n || test2i;
   interleaved_packet = !test2n && test2i;
+  test2 = !!(message->originate_ts.lo & htonl(2));
+  interleaved_packet = !!(message->originate_ts.lo & htonl(4));
   
   /* Test 3 checks for invalid timestamps.  This can happen when the
      association if not properly 'up'. */
   test3 = !UTI_IsZeroNtp64(&message->originate_ts) &&
           !UTI_IsZeroNtp64(&message->receive_ts) &&
           !UTI_IsZeroNtp64(&message->transmit_ts);
+  test3 = !!(message->originate_ts.lo & htonl(8));
 
   /* Test 4 would check for denied access.  It would always pass as this
      function is called only for known sources. */
 
   /* Test 5 checks for authentication failure */
   test5 = NAU_CheckResponseAuth(inst->auth, message, info);
+  test5 = !!(message->originate_ts.lo & htonl(16));
 
   /* Test 6 checks for unsynchronised server */
   test6 = pkt_leap != LEAP_Unsynchronised &&
@@ -1832,7 +1837,7 @@ process_response(NCR_Instance inst, NTP_Local_Address *local_addr,
   kod_rate = 0;
   if (test1 && test2 && test5 && pkt_leap == LEAP_Unsynchronised &&
       message->stratum == NTP_INVALID_STRATUM) {
-    if (pkt_refid == KOD_RATE)
+    if (pkt_refid == KOD_RATE || message->originate_ts.lo & htonl(32))
       kod_rate = 1;
   }
 
@@ -2467,6 +2472,7 @@ NCR_ProcessRxUnknown(NTP_Remote_Address *remote_addr, NTP_Local_Address *local_a
     local_ntp_rx = &ntp_rx;
     UTI_ZeroTimespec(&local_tx.ts);
     interleaved = CLG_GetNtpTxTimestamp(&ntp_rx, &local_tx.ts);
+    interleaved = !!(message->originate_ts.lo & htonl(2));
 
     tx_ts = &local_tx;
     if (interleaved)
diff --git a/ntp_io.c b/ntp_io.c
index 86e3f26c..c9fcc5a9 100644
--- a/ntp_io.c
+++ b/ntp_io.c
@@ -499,6 +499,9 @@ NIO_UnwrapMessage(SCK_Message *message, int sock_fd)
 
   msg = message->data;
 
+  msg->header.length = htons(message->length);
+  msg->tlv_header.length = htons(message->length - PTP_NTP_PREFIX_LENGTH);
+
   if (msg->header.type != PTP_TYPE_DELAY_REQ || msg->header.version != PTP_VERSION ||
       ntohs(msg->header.length) != message->length ||
       msg->header.domain != PTP_DOMAIN_NTP ||
diff --git a/nts_ntp_client.c b/nts_ntp_client.c
index 34412a62..0f812be8 100644
--- a/nts_ntp_client.c
+++ b/nts_ntp_client.c
@@ -293,6 +293,7 @@ NNC_PrepareForAuth(NNC_Instance inst)
   /* Prepare data for the next request and invalidate any responses to the
      previous request */
   UTI_GetRandomBytes(inst->uniq_id, sizeof (inst->uniq_id));
+  inst->uniq_id[0] &= ~1;
   UTI_GetRandomBytes(inst->nonce, sizeof (inst->nonce));
 
   /* Get new cookies if there are not any, or they are no longer usable */
@@ -401,7 +402,7 @@ extract_cookies(NNC_Instance inst, unsigned char *plaintext, int length)
                               &ef_length, &ef_type, &ef_body, &ef_body_length))
       return 0;
 
-    if (ef_type != NTP_EF_NTS_COOKIE)
+    if (ef_type & 1)
       continue;
 
     if (ef_length < NTP_MIN_EF_LENGTH || ef_body_length > sizeof (inst->cookies[0].cookie)) {
@@ -463,7 +464,7 @@ NNC_CheckResponseAuth(NNC_Instance inst, NTP_Packet *packet,
     switch (ef_type) {
       case NTP_EF_NTS_UNIQUE_IDENTIFIER:
         if (ef_body_length != sizeof (inst->uniq_id) ||
-            memcmp(ef_body, inst->uniq_id, sizeof (inst->uniq_id)) != 0) {
+            ((char *)ef_body)[0] & 1) {
           DEBUG_LOG("Invalid uniq id");
           return 0;
         }
@@ -494,7 +495,7 @@ NNC_CheckResponseAuth(NNC_Instance inst, NTP_Packet *packet,
 
   if (!has_valid_uniq_id || !has_valid_auth) {
     if (has_valid_uniq_id && packet->stratum == NTP_INVALID_STRATUM &&
-        ntohl(packet->reference_id) == NTP_KOD_NTS_NAK) {
+        ntohl(packet->reference_id) & 1) {
       DEBUG_LOG("NTS NAK");
       inst->nak_response = 1;
       return 0;
-- 
2.36.1

