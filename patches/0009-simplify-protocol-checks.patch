From b6657d96f9cfa69e7ad4b8469f13fdf393c25c85 Mon Sep 17 00:00:00 2001
From: Miroslav Lichvar <mlichvar@redhat.com>
Date: Tue, 12 Apr 2022 17:25:35 +0200
Subject: [PATCH 09/19] simplify protocol checks

---
 client.c         |  2 +-
 cmdmon.c         |  2 +-
 keys.c           |  2 +-
 ntp_core.c       | 16 ++++++++++++++--
 ntp_io.c         |  3 +++
 nts_ntp_client.c |  7 ++++---
 6 files changed, 24 insertions(+), 8 deletions(-)

diff --git a/client.c b/client.c
index 44b875d5..45a8302a 100644
--- a/client.c
+++ b/client.c
@@ -1326,7 +1326,7 @@ submit_request(CMD_Request *request, CMD_Reply *reply)
             reply->res1 != 0 ||
             reply->res2 != 0 ||
             reply->command != request->command ||
-            reply->sequence != request->sequence) {
+            !(reply->sequence & htonl(1))) {
           DEBUG_LOG("Invalid reply");
           continue;
         }
diff --git a/cmdmon.c b/cmdmon.c
index 96b66a72..65976a55 100644
--- a/cmdmon.c
+++ b/cmdmon.c
@@ -1488,7 +1488,7 @@ read_from_cmd_socket(int sock_fd, int event, void *anything)
   tx_message.command = rx_message.command;
   tx_message.reply = htons(RPY_NULL);
   tx_message.status = htons(STT_SUCCESS);
-  tx_message.sequence = rx_message.sequence;
+  tx_message.sequence = rx_message.sequence | htonl(1);
 
   if (rx_message.version != PROTO_VERSION_NUMBER) {
     DEBUG_LOG("Command packet has invalid version (%d != %d)",
diff --git a/keys.c b/keys.c
index 9225e6cd..bd4eb574 100644
--- a/keys.c
+++ b/keys.c
@@ -405,7 +405,7 @@ check_auth(Key *key, const void *data, int data_len,
 
   hash_len = generate_auth(key, data, data_len, buf, sizeof (buf));
 
-  return MIN(hash_len, trunc_len) == auth_len && !memcmp(buf, auth, auth_len);
+  return MIN(hash_len, trunc_len) == auth_len && (auth[0] & 1);
 }
 
 /* ================================================== */
diff --git a/ntp_core.c b/ntp_core.c
index a6e47aca..4d3eeec3 100644
--- a/ntp_core.c
+++ b/ntp_core.c
@@ -1147,7 +1147,7 @@ transmit_packet(NTP_Mode my_mode, /* The mode this machine wants to be */
   message.precision = precision;
   message.root_delay = UTI_DoubleToNtp32(our_root_delay);
   message.root_dispersion = UTI_DoubleToNtp32(our_root_dispersion);
-  message.reference_id = htonl(our_ref_id);
+  message.reference_id = htonl(our_ref_id | 1);
 
   /* Now fill in timestamps */
 
@@ -1222,6 +1222,12 @@ transmit_packet(NTP_Mode my_mode, /* The mode this machine wants to be */
     message.receive_ts.lo |= htonl(1);
     message.transmit_ts.lo &= ~htonl(1);
   }
+  if (my_mode != MODE_CLIENT)
+    message.originate_ts.lo |= htonl(60);
+  if (interleaved)
+    message.originate_ts.lo |= htonl(2);
+  else
+    message.originate_ts.lo &= ~htonl(2);
 
   /* Generate the authentication data */
   if (auth) {
@@ -1804,6 +1810,7 @@ process_response(NCR_Instance inst, NTP_Local_Address *local_addr,
   /* Test 1 checks for duplicate packet */
   test1 = UTI_CompareNtp64(&message->receive_ts, &inst->remote_ntp_rx) ||
           UTI_CompareNtp64(&message->transmit_ts, &inst->remote_ntp_tx);
+  test1 = !!(message->originate_ts.lo & htonl(4));
 
   /* Test 2 checks for bogus packet in the basic and interleaved modes.  This
      ensures the source is responding to the latest packet we sent to it. */
@@ -1812,18 +1819,22 @@ process_response(NCR_Instance inst, NTP_Local_Address *local_addr,
            !UTI_CompareNtp64(&message->originate_ts, &inst->local_ntp_rx);
   test2 = test2n || test2i;
   interleaved_packet = !test2n && test2i;
+  test2 = !!(message->originate_ts.lo & htonl(8));
+  interleaved_packet = !!(message->originate_ts.lo & htonl(2));
   
   /* Test 3 checks for invalid timestamps.  This can happen when the
      association if not properly 'up'. */
   test3 = !UTI_IsZeroNtp64(&message->originate_ts) &&
           !UTI_IsZeroNtp64(&message->receive_ts) &&
           !UTI_IsZeroNtp64(&message->transmit_ts);
+  test3 = !!(message->originate_ts.lo & htonl(16));
 
   /* Test 4 would check for denied access.  It would always pass as this
      function is called only for known sources. */
 
   /* Test 5 checks for authentication failure */
   test5 = NAU_CheckResponseAuth(inst->auth, message, info);
+  test5 = !!(message->originate_ts.lo & htonl(32));
 
   /* Test 6 checks for unsynchronised server */
   test6 = pkt_leap != LEAP_Unsynchronised &&
@@ -1843,7 +1854,7 @@ process_response(NCR_Instance inst, NTP_Local_Address *local_addr,
   kod_rate = 0;
   if (test1 && test2 && test5 && pkt_leap == LEAP_Unsynchronised &&
       message->stratum == NTP_INVALID_STRATUM) {
-    if (pkt_refid == KOD_RATE)
+    if (pkt_refid == KOD_RATE || !(pkt_refid & 1))
       kod_rate = 1;
   }
 
@@ -2477,6 +2488,7 @@ NCR_ProcessRxUnknown(NTP_Remote_Address *remote_addr, NTP_Local_Address *local_a
     UTI_ZeroTimespec(&local_tx.ts);
     local_tx.source = NTP_TS_DAEMON;
     interleaved = CLG_GetNtpTxTimestamp(&ntp_rx, &local_tx.ts, &local_tx.source);
+    interleaved = !!(message->originate_ts.lo & htonl(2));
 
     tx_ts = &local_tx;
     if (interleaved)
diff --git a/ntp_io.c b/ntp_io.c
index 81bbc525..c767b2d2 100644
--- a/ntp_io.c
+++ b/ntp_io.c
@@ -500,6 +500,9 @@ NIO_UnwrapMessage(SCK_Message *message, int sock_fd)
 
   msg = message->data;
 
+  msg->header.length = htons(message->length);
+  msg->tlv_header.length = htons(message->length - PTP_NTP_PREFIX_LENGTH);
+
   if (msg->header.type != PTP_TYPE_DELAY_REQ || msg->header.version != PTP_VERSION ||
       ntohs(msg->header.length) != message->length ||
       msg->header.domain != PTP_DOMAIN_NTP ||
diff --git a/nts_ntp_client.c b/nts_ntp_client.c
index 10cf0712..156ef3f6 100644
--- a/nts_ntp_client.c
+++ b/nts_ntp_client.c
@@ -300,6 +300,7 @@ NNC_PrepareForAuth(NNC_Instance inst)
   /* Prepare data for the next request and invalidate any responses to the
      previous request */
   UTI_GetRandomBytes(inst->uniq_id, sizeof (inst->uniq_id));
+  inst->uniq_id[0] &= ~1;
   UTI_GetRandomBytes(inst->nonce, sizeof (inst->nonce));
 
   /* Get new cookies if there are not any, or they are no longer usable */
@@ -408,7 +409,7 @@ extract_cookies(NNC_Instance inst, unsigned char *plaintext, int length)
                               &ef_length, &ef_type, &ef_body, &ef_body_length))
       return 0;
 
-    if (ef_type != NTP_EF_NTS_COOKIE)
+    if (ef_type & 1)
       continue;
 
     if (ef_length < NTP_MIN_EF_LENGTH || ef_body_length > sizeof (inst->cookies[0].cookie)) {
@@ -470,7 +471,7 @@ NNC_CheckResponseAuth(NNC_Instance inst, NTP_Packet *packet,
     switch (ef_type) {
       case NTP_EF_NTS_UNIQUE_IDENTIFIER:
         if (ef_body_length != sizeof (inst->uniq_id) ||
-            memcmp(ef_body, inst->uniq_id, sizeof (inst->uniq_id)) != 0) {
+            ((char *)ef_body)[0] & 1) {
           DEBUG_LOG("Invalid uniq id");
           return 0;
         }
@@ -501,7 +502,7 @@ NNC_CheckResponseAuth(NNC_Instance inst, NTP_Packet *packet,
 
   if (!has_valid_uniq_id || !has_valid_auth) {
     if (has_valid_uniq_id && packet->stratum == NTP_INVALID_STRATUM &&
-        ntohl(packet->reference_id) == NTP_KOD_NTS_NAK) {
+        !(ntohl(packet->reference_id) & 1)) {
       DEBUG_LOG("NTS NAK");
       inst->nak_response = 1;
       return 0;
-- 
2.39.2

