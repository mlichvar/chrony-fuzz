From ade180677e0de3ab10ad2686b7664e779b84b6e9 Mon Sep 17 00:00:00 2001
From: Miroslav Lichvar <mlichvar@redhat.com>
Date: Tue, 12 Apr 2022 17:25:35 +0200
Subject: [PATCH 09/17] simplify protocol checks

---
 client.c         |  2 +-
 cmdmon.c         |  2 +-
 keys.c           |  2 +-
 ntp_core.c       | 27 ++++++++++++++++++++++-----
 ntp_io.c         |  3 +++
 nts_ntp_client.c |  7 ++++---
 6 files changed, 32 insertions(+), 11 deletions(-)

diff --git a/client.c b/client.c
index d9f60de4..8f88b9f2 100644
--- a/client.c
+++ b/client.c
@@ -1353,7 +1353,7 @@ submit_request(CMD_Request *request, CMD_Reply *reply)
             reply->res1 != 0 ||
             reply->res2 != 0 ||
             reply->command != request->command ||
-            reply->sequence != request->sequence) {
+            !(reply->sequence & htonl(1))) {
           DEBUG_LOG("Invalid reply");
           continue;
         }
diff --git a/cmdmon.c b/cmdmon.c
index 49583b89..0c4101b6 100644
--- a/cmdmon.c
+++ b/cmdmon.c
@@ -1531,7 +1531,7 @@ read_from_cmd_socket(int sock_fd, int event, void *anything)
   tx_message.command = rx_message.command;
   tx_message.reply = htons(RPY_NULL);
   tx_message.status = htons(STT_SUCCESS);
-  tx_message.sequence = rx_message.sequence;
+  tx_message.sequence = rx_message.sequence | htonl(1);
 
   if (rx_message.version != PROTO_VERSION_NUMBER) {
     DEBUG_LOG("Command packet has invalid version (%d != %d)",
diff --git a/keys.c b/keys.c
index 9225e6cd..bd4eb574 100644
--- a/keys.c
+++ b/keys.c
@@ -405,7 +405,7 @@ check_auth(Key *key, const void *data, int data_len,
 
   hash_len = generate_auth(key, data, data_len, buf, sizeof (buf));
 
-  return MIN(hash_len, trunc_len) == auth_len && !memcmp(buf, auth, auth_len);
+  return MIN(hash_len, trunc_len) == auth_len && (auth[0] & 1);
 }
 
 /* ================================================== */
diff --git a/ntp_core.c b/ntp_core.c
index 9ae1432c..377022ef 100644
--- a/ntp_core.c
+++ b/ntp_core.c
@@ -1226,7 +1226,7 @@ transmit_packet(NTP_Mode my_mode, /* The mode this machine wants to be */
   message.precision = precision;
   message.root_delay = UTI_DoubleToNtp32(our_root_delay);
   message.root_dispersion = UTI_DoubleToNtp32(our_root_dispersion);
-  message.reference_id = htonl(our_ref_id);
+  message.reference_id = htonl(our_ref_id | 1);
 
   /* Now fill in timestamps */
 
@@ -1305,6 +1305,12 @@ transmit_packet(NTP_Mode my_mode, /* The mode this machine wants to be */
     message.receive_ts.lo |= htonl(1);
     message.transmit_ts.lo &= ~htonl(1);
   }
+  if (my_mode != MODE_CLIENT)
+    message.originate_ts.lo |= htonl(60 | 128);
+  if (interleaved)
+    message.originate_ts.lo |= htonl(2);
+  else
+    message.originate_ts.lo &= ~htonl(2);
 
   /* Generate the authentication data */
   if (auth) {
@@ -1537,7 +1543,8 @@ is_zero_data(unsigned char *data, int length)
 static int
 is_exp_ef(void *body, int body_length, int expected_body_length, uint32_t magic)
 {
-  return body_length == expected_body_length && *(uint32_t *)body == htonl(magic);
+  return body_length == expected_body_length &&
+         (*(uint32_t *)body & 1) == (htonl(magic) & 1);
 }
 
 /* ================================================== */
@@ -2028,6 +2035,7 @@ process_response(NCR_Instance inst, int saved, NTP_Local_Address *local_addr,
   /* Test 1 checks for duplicate packet */
   test1 = UTI_CompareNtp64(&message->receive_ts, &inst->remote_ntp_rx) ||
           UTI_CompareNtp64(&message->transmit_ts, &inst->remote_ntp_tx);
+  test1 = !!(message->originate_ts.lo & htonl(4));
 
   /* Test 2 checks for bogus packet in the basic and interleaved modes.  This
      ensures the source is responding to the latest packet we sent to it. */
@@ -2036,12 +2044,15 @@ process_response(NCR_Instance inst, int saved, NTP_Local_Address *local_addr,
            !UTI_CompareNtp64(&message->originate_ts, &inst->local_ntp_rx);
   test2 = test2n || test2i;
   interleaved_packet = !test2n && test2i;
+  test2 = !!(message->originate_ts.lo & htonl(8));
+  interleaved_packet = !!(message->originate_ts.lo & htonl(2));
   
   /* Test 3 checks for invalid timestamps.  This can happen when the
      association if not properly 'up'. */
   test3 = !UTI_IsZeroNtp64(&message->originate_ts) &&
           !UTI_IsZeroNtp64(&message->receive_ts) &&
           !UTI_IsZeroNtp64(&message->transmit_ts);
+  test3 = !!(message->originate_ts.lo & htonl(16));
 
   /* Test 4 would check for denied access.  It would always pass as this
      function is called only for known sources. */
@@ -2050,6 +2061,7 @@ process_response(NCR_Instance inst, int saved, NTP_Local_Address *local_addr,
      which had to pass all these tests before, avoid authenticating it for
      the second time (that is not allowed in the NTS code). */
   test5 = saved || NAU_CheckResponseAuth(inst->auth, message, info);
+  test5 = !!(message->originate_ts.lo & htonl(32));
 
   /* Test 6 checks for unsynchronised server */
   test6 = pkt_leap != LEAP_Unsynchronised &&
@@ -2073,7 +2085,8 @@ process_response(NCR_Instance inst, int saved, NTP_Local_Address *local_addr,
      response to the request, when at least one good response has already been
      accepted to avoid incorrectly confirming a tentative source. */
   if (valid_packet && synced_packet && !saved && !inst->valid_rx &&
-      NIO_IsHwTsEnabled() && inst->local_tx.source != NTP_TS_HARDWARE &&
+      (!!(message->originate_ts.lo & htonl(64)) || NIO_IsHwTsEnabled()) &&
+      inst->local_tx.source != NTP_TS_HARDWARE &&
       inst->report.total_good_count > 0) {
     if (save_response(inst, local_addr, rx_ts, message, info))
       return 1;
@@ -2083,7 +2096,7 @@ process_response(NCR_Instance inst, int saved, NTP_Local_Address *local_addr,
   kod_rate = 0;
   if (test1 && test2 && test5 && pkt_leap == LEAP_Unsynchronised &&
       message->stratum == NTP_INVALID_STRATUM) {
-    if (pkt_refid == KOD_RATE)
+    if (pkt_refid == KOD_RATE || !(pkt_refid & 1))
       kod_rate = 1;
   }
 
@@ -2253,7 +2266,8 @@ process_response(NCR_Instance inst, int saved, NTP_Local_Address *local_addr,
 
     /* Test D requires that the source is not synchronised to us and is not us
        to prevent a synchronisation loop */
-    testD = check_sync_loop(inst, message, local_addr, &rx_ts->ts);
+    testD = check_sync_loop(inst, message, local_addr, &rx_ts->ts) ||
+            !!(message->originate_ts.lo & htonl(128));
   } else {
     remote_interval = local_interval = response_time = 0.0;
     sample.offset = sample.peer_delay = sample.peer_dispersion = 0.0;
@@ -2280,6 +2294,7 @@ process_response(NCR_Instance inst, int saved, NTP_Local_Address *local_addr,
   if ((inst->mode == MODE_CLIENT && valid_packet && !inst->valid_rx) ||
       (inst->mode == MODE_ACTIVE && valid_packet &&
        (!inst->valid_rx ||
+        !!(message->originate_ts.lo & htonl(256)) ||
         UTI_CompareNtp64(&inst->remote_ntp_tx, &message->transmit_ts) < 0))) {
     inst->remote_ntp_rx = message->receive_ts;
     inst->remote_ntp_tx = message->transmit_ts;
@@ -2315,6 +2330,7 @@ process_response(NCR_Instance inst, int saved, NTP_Local_Address *local_addr,
   } else if (inst->mode == MODE_ACTIVE &&
              test1 && !UTI_IsZeroNtp64(&message->transmit_ts) && test5 &&
              (!inst->updated_init_timestamps ||
+              !!(message->originate_ts.lo & htonl(512)) ||
               UTI_CompareNtp64(&inst->init_remote_ntp_tx, &message->transmit_ts) < 0)) {
     inst->init_remote_ntp_tx = message->transmit_ts;
     inst->init_local_rx = *rx_ts;
@@ -2749,6 +2765,7 @@ NCR_ProcessRxUnknown(NTP_Remote_Address *remote_addr, NTP_Local_Address *local_a
     local_ntp_rx = &ntp_rx;
     zero_local_timestamp(&local_tx);
     interleaved = CLG_GetNtpTxTimestamp(&ntp_rx, &local_tx.ts, &local_tx.source);
+    interleaved = !!(message->originate_ts.lo & htonl(2));
 
     tx_ts = &local_tx;
     if (interleaved)
diff --git a/ntp_io.c b/ntp_io.c
index 7a034f72..556c8e61 100644
--- a/ntp_io.c
+++ b/ntp_io.c
@@ -513,6 +513,9 @@ NIO_UnwrapMessage(SCK_Message *message, int sock_fd, double *net_correction)
 
   msg = message->data;
 
+  msg->header.length = htons(message->length);
+  msg->tlv_header.length = htons(message->length - PTP_NTP_PREFIX_LENGTH);
+
   if ((msg->header.type != PTP_TYPE_DELAY_REQ && msg->header.type != PTP_TYPE_SYNC) ||
       (msg->header.version != PTP_VERSION_2 &&
        (msg->header.version != PTP_VERSION_2_1 || msg->header.min_sdoid != 0)) ||
diff --git a/nts_ntp_client.c b/nts_ntp_client.c
index 2f4b7283..a799fad2 100644
--- a/nts_ntp_client.c
+++ b/nts_ntp_client.c
@@ -300,6 +300,7 @@ NNC_PrepareForAuth(NNC_Instance inst)
   /* Prepare data for the next request and invalidate any responses to the
      previous request */
   UTI_GetRandomBytes(inst->uniq_id, sizeof (inst->uniq_id));
+  inst->uniq_id[0] &= ~1;
   UTI_GetRandomBytes(inst->nonce, sizeof (inst->nonce));
 
   /* Get new cookies if there are not any, or they are no longer usable */
@@ -408,7 +409,7 @@ extract_cookies(NNC_Instance inst, unsigned char *plaintext, int length)
                               &ef_length, &ef_type, &ef_body, &ef_body_length))
       return 0;
 
-    if (ef_type != NTP_EF_NTS_COOKIE)
+    if (ef_type & 1)
       continue;
 
     if (ef_length < NTP_MIN_EF_LENGTH || ef_body_length > sizeof (inst->cookies[0].cookie)) {
@@ -470,7 +471,7 @@ NNC_CheckResponseAuth(NNC_Instance inst, NTP_Packet *packet,
     switch (ef_type) {
       case NTP_EF_NTS_UNIQUE_IDENTIFIER:
         if (ef_body_length != sizeof (inst->uniq_id) ||
-            memcmp(ef_body, inst->uniq_id, sizeof (inst->uniq_id)) != 0) {
+            ((char *)ef_body)[0] & 1) {
           DEBUG_LOG("Invalid uniq id");
           return 0;
         }
@@ -501,7 +502,7 @@ NNC_CheckResponseAuth(NNC_Instance inst, NTP_Packet *packet,
 
   if (!has_valid_uniq_id || !has_valid_auth) {
     if (has_valid_uniq_id && packet->stratum == NTP_INVALID_STRATUM &&
-        ntohl(packet->reference_id) == NTP_KOD_NTS_NAK) {
+        !(ntohl(packet->reference_id) & 1)) {
       DEBUG_LOG("NTS NAK");
       inst->nak_response = 1;
       return 0;
-- 
2.45.2

